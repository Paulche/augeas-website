.. -*- rst -*-
   restindex
     initialheaderlevel: 2
     page-title: Tree
   /restindex

=========
The tree
=========

The tree that Augeas maintains is very similar to the tree of files and
directories in a filesystem: the components of a path are strings that can
not contain the character ``/``, and leaves have an optional value
associated with them, which can be an arbitrary string.

Augeas' tree deviates from this model in one important way: multiple
children in a tree can have the same label. For example, the lens that
processes ``sshd_config`` uses that to map multiple ``AcceptEnv`` lines
into multiple nodes ``/system/config/sshd/AcceptEnv``, one for each line in
the file. You can see those nodes in ``augtool`` with

::

  augtool> print /system/config/sshd

The Augeas API makes sure that these nodes appear as one logical node:
compare the result of the above print with the result of 

::

  augtool> ls /system/config/sshd/AcceptEnv

The ``ls`` command in ``augtool`` directly corresponds to the ``aug_ls``
call in the public API.

Important paths
---------------

The Augeas tree consist of two separate hierarchies: ``/augeas`` used for
reporting important information about how files were processed, and
``/system/config`` containing the result of parsing configuration files.

Configuration data in ``/system/config``
****************************************

By convention, all configuration files get parsed into the
``/system/config`` hierarchy. You can think of it as corresponding to the
``/etc`` directory in the file system.

How a file is mapped into the tree is controlled by the ``map`` statement
in the Augeas descriptor. The ``map`` statement has the following syntax:

::

  map
    grammar NAME
    include GLOB P1 P2 ... PN
  end

The ``include`` statement establishes the actual mapping of files into the
tree: ``GLOB`` can be an arbitrary shell globbing expression, for example,
``/etc/pam.d/*``. Any file matching that glob [1]_ will be processed according
to this ``map`` statement, using the grammar with name ``NAME``. The
grammar can be declared in the same file or in a different file, as long as
it can be found on Augeas's search path, which defaults to
``/usr/share/augeas/lenses`` and the paths in the environment variable
``AUGEAS_LENS_LIB``.

The point where the contents of a file are mapped into the tree is computed
from the path components ``P1``, ``P2``, ... ``PN``: each of them can be a
string denoting a path, or the special symbol ``$basename``, which
evaluates to the basename of the file matched by the glob [2]_. The final
path in the tree is the concatenation of all the ``Pi``.

Metainformation in ``/augeas``
******************************

The ``/augeas`` hierarchy reports some information for each file ``p`` that
was processed in ``/augeas/files/$p``. For example, for the file
``/etc/hosts``, printing ``/augeas/files/etc/hosts`` shows:

::

  augtool> print /augeas/files/etc/hosts
  /augeas/files/etc/hosts/path = /system/config/hosts
  /augeas/files/etc/hosts/grammar = hosts
  /augeas/files/etc/hosts/error

The ``path`` value indicates that the result of parsing ``/etc/hosts`` can
be found underneath ``/system/config/hosts``. That mapping is controlled by
the ``map`` statement in ``hosts.aug``. The ``grammar`` value indicates the
grammar used to process ``/etc/hosts``. The ``error`` entry is set if any
errors happen during processing the file, e.g. if the file can not be read
or can not be parsed using the specified grammar. Successful processing, as
is the case here, is indicated by the ``error`` entry having the value
``NULL``.

.. [1] Some files are actually never matched by a glob: anything that
    looks like an editor backup file (ending in ``~``) or files with the
    extension ``.augnew`` are suppressed. Which files are excluded in this
    way is hardcoded right now.

.. [2] It would, of course, be desirable to have more flexible ways to
   map file names to tree paths. That will likely only happen after the
   Augeas language has been revamped, since more flexible mappings require
   much more flexibility in the language.
